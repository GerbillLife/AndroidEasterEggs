# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require "uri"
require "net/http"

def send_telegram_photo(token = ENV["TELEGRAM_TOKEN"], chat_id = ENV["TELEGRAM_TO"], photo, caption)
  if token == nil
    puts "‚ö†Ô∏è token is nil, skip!"
    return
  end
  if chat_id == nil
    puts "‚ö†Ô∏è chat_id is nil, skip!"
    return
  end

  # https://core.telegram.org/bots/api#sendphoto
  url = URI("https://api.telegram.org/bot#{token}/sendPhoto")
  https = Net::HTTP.new(url.host, url.port)
  https.use_ssl = true

  request = Net::HTTP::Post.new(url)
  form_data = [
    ['chat_id', "-100#{chat_id}"],
    ['parse_mode', 'Markdown'],
    ['caption', caption],
    ['photo', photo],
  ]
  request.set_form form_data, 'multipart/form-data'
  response = https.request(request)
  puts response.read_body
end

default_platform(:android)

platform :android do

  desc "Submit a new Beta Build to Pgyer"
  lane :beta do
    if ENV["PGYER_API_KEY"] == nil
      puts "‚ö†Ô∏è PGYER_API_KEY env not found, skip!"
      next
    end

    gradle(tasks: ["clean", "app:assembleBeta"])

    # https://www.pgyer.com/doc/view/fastlane
    pgyer_answer = pgyer(
      api_key: ENV["PGYER_API_KEY"],
      update_description: File.read(Dir["./metadata/android/zh-CN/changelogs/*.txt"][-1])
    )

    # Send to Telegram
    pgyer_build_key = pgyer_answer["buildKey"]
    commit_hash = last_git_commit[:commit_hash]
    message = <<~EOF
      *Easter Eggs*

      üöÄ New Beta Version ! üéâ

      *‚ùáÔ∏è Changelogs:*

      #{File.read(Dir["./metadata/android/en-US/changelogs/*.txt"][-1])}

      *üîó Links:*

      - ‚¨áÔ∏è [Download](https://www.pgyer.com/#{pgyer_build_key})
      - üêô [Source Code](https://github.com/hushenghao/AndroidEasterEggs)

      *üßë‚Äçüíª Build:*

      - Commit: [#{commit_hash}](https://github.com/hushenghao/AndroidEasterEggs/commit/#{commit_hash})
      - Build Key: [#{pgyer_build_key}](https://www.pgyer.com/#{pgyer_build_key})
    EOF
    photo = 'https://raw.githubusercontent.com/hushenghao/AndroidEasterEggs/main/fastlane/metadata/android/en-US/images/featureGraphic.png'
    send_telegram_photo(photo, message)
  end

  desc "Deploy a new version to the Google Play"
  lane :deploy do |options|
    if ENV["JSON_KEY_FILE"] == nil
      puts "‚ö†Ô∏è JSON_KEY_FILE env not found, skip!"
      next
    end

    # https://docs.fastlane.tools/actions/upload_to_play_store/
    # skip_upload_aab           Whether to skip uploading AAB	                                false
    # skip_upload_metadata      Whether to skip uploading metadata, changelogs not included	    false
    # skip_upload_images        Whether to skip uploading images, screenshots not included	    false
    # skip_upload_screenshots   Whether to skip uploading SCREENSHOTS	                        false
    # skip_upload_changelogs    Whether to skip uploading changelogs	                        false
    case options[:mode]
    when "metadata"
        # Upload metadata and images, screenshots not included
        upload_to_play_store(
            skip_upload_aab: true,
            skip_upload_screenshots: true,
            skip_upload_changelogs: true
        )
    when "screenshots"
        # Device art generator
        #   https://developer.android.google.cn/distribute/marketing-tools/device-art-generator
        # Screenshot Devices:
        #   phone:      Pixel 6                     1080x2400
        #   sevenInch:  7.6" Foldable main screen   1768x2208
        #   tenInch:    Nexus 9                     1536x2048
        # Style:
        #   [ ] Shadow  [x] Screen Glare
        upload_to_play_store(
            skip_upload_aab: true,
            skip_upload_metadata: true,
            skip_upload_images: true,
            skip_upload_changelogs: true
        )
    when "full"
        # Upload All
        gradle(task: "clean app:bundleRelease")
        upload_to_play_store
    else
        # Upload new version
        gradle(task: "clean app:bundleRelease")
        upload_to_play_store(
            skip_upload_metadata: true,
            skip_upload_images: true,
            skip_upload_screenshots: true
        )
    end
  end

end
